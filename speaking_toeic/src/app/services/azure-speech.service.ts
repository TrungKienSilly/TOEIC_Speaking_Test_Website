import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';

export interface AzureConfig {
  azure: {
    subscriptionKey: string;
    serviceRegion: string;
    tts?: {
      usVoice?: string;
      ukVoice?: string;
    }
  }
}

export interface AssessmentResult {
  accuracy: number;
  completeness: number;
  fluency: number;
  overall: number;
  raw?: any;
}

@Injectable({ providedIn: 'root' })
export class AzureSpeechService {
  private config: AzureConfig | null = null;
  private loadingPromise: Promise<void> | null = null;

  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}

  private async ensureConfigLoaded(): Promise<void> {
    if (!isPlatformBrowser(this.platformId)) {
      throw new Error('Azure Speech ch·ªâ ho·∫°t ƒë·ªông tr√™n browser');
    }
    if (this.config) return;
    
    // S·ª≠ d·ª•ng config hardcode tr·ª±c ti·∫øp
    this.config = {
      azure: {
        subscriptionKey: 'Your_key',// Thay th·∫ø b·∫±ng kh√≥a th·ª±c t·∫ø
        serviceRegion: 'Your_region',// Thay th·∫ø b·∫±ng v√πng th·ª±c t·∫ø
        tts: {
          usVoice: 'en-US-JennyNeural',
          ukVoice: 'en-GB-LibbyNeural'
        }
      }
    };
    console.log('Azure config loaded successfully');
  }

  private buildSpeechConfig(): SpeechSDK.SpeechConfig {
    if (!this.config) throw new Error('Config Azure ch∆∞a s·∫µn s√†ng');
    const { subscriptionKey, serviceRegion } = this.config.azure;
    const speechConfig = SpeechSDK.SpeechConfig.fromSubscription(subscriptionKey, serviceRegion);
    return speechConfig;
  }

  async speak(text: string, variant: 'us' | 'uk' = 'us'): Promise<void> {
    if (!isPlatformBrowser(this.platformId)) return;
    await this.ensureConfigLoaded();
    const speechConfig = this.buildSpeechConfig();

    // Ch·ªçn gi·ªçng
    const us = this.config?.azure.tts?.usVoice || 'en-US-JennyNeural';
    const uk = this.config?.azure.tts?.ukVoice || 'en-GB-LibbyNeural';
    speechConfig.speechSynthesisVoiceName = variant === 'us' ? us : uk;

    const audioConfig = SpeechSDK.AudioConfig.fromDefaultSpeakerOutput();
    const synthesizer = new SpeechSDK.SpeechSynthesizer(speechConfig, audioConfig);

    return new Promise<void>((resolve, reject) => {
      synthesizer.speakTextAsync(
        text,
        (result: SpeechSDK.SpeechSynthesisResult) => {
          synthesizer.close();
          if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {
            resolve();
          } else {
            reject(new Error('TTS th·∫•t b·∫°i'));
          }
        },
        (error: any) => {
          synthesizer.close();
          reject(error);
        }
      );
    });
  }

  async assessPronunciation(
    referenceText: string, 
    timeoutMs = 5000,
    onReady?: (readyTimeMs: number) => void
  ): Promise<AssessmentResult> {
    if (!isPlatformBrowser(this.platformId)) throw new Error('Kh√¥ng h·ªó tr·ª£ tr√™n server');
    
    const startTime = performance.now();
    await this.ensureConfigLoaded();

    console.log(`B·∫Øt ƒë·∫ßu ch·∫•m ƒëi·ªÉm cho t·ª´: "${referenceText}", timeout: ${timeoutMs}ms`);
    
    const speechConfig = this.buildSpeechConfig();
    // Ng√¥n ng·ªØ nh·∫≠n d·∫°ng: m·∫∑c ƒë·ªãnh en-US, c√≥ th·ªÉ cho ph√©p ch·ªçn sau
    speechConfig.speechRecognitionLanguage = 'en-US';

    const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();
    const recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);

    // √Åp d·ª•ng Pronunciation Assessment
    const paConfig = new SpeechSDK.PronunciationAssessmentConfig(
      referenceText,
      SpeechSDK.PronunciationAssessmentGradingSystem.HundredMark,
      SpeechSDK.PronunciationAssessmentGranularity.Phoneme,
      true
    );
    paConfig.nbestPhonemeCount = 3;
    paConfig.applyTo(recognizer);
    
    // T√≠nh th·ªùi gian Azure kh·ªüi ƒë·ªông
    const readyTime = Math.round(performance.now() - startTime);
    console.log(`‚úÖ Azure s·∫µn s√†ng sau ${readyTime}ms`);
    
    // Callback th·ªùi gian kh·ªüi ƒë·ªông
    if (onReady) {
      onReady(readyTime);
    }

    const result = await new Promise<SpeechSDK.SpeechRecognitionResult>((resolve, reject) => {
      let timeoutId: any;
      let isCompleted = false;
      
      // Cleanup timeout - ch·ªâ ƒë·ªÉ d·ªçn d·∫πp, kh√¥ng reject
      timeoutId = setTimeout(() => {
        if (!isCompleted) {
          console.warn(`Cleanup sau ${timeoutMs}ms - Azure v·∫´n ƒëang x·ª≠ l√Ω...`);
          try { recognizer.stopContinuousRecognitionAsync(() => {}, () => {}); } catch {}
        }
      }, timeoutMs);

      recognizer.recognizeOnceAsync(
        (r: SpeechSDK.SpeechRecognitionResult) => {
          if (!isCompleted) {
            isCompleted = true;
            clearTimeout(timeoutId);
            console.log(`‚úÖ Nh·∫≠n d·∫°ng ho√†n t·∫•t. Reason: ${r.reason}, Text: "${r.text}"`);
            try { recognizer.close(); } catch {}
            resolve(r);
          }
        },
        (err: any) => {
          if (!isCompleted) {
            isCompleted = true;
            clearTimeout(timeoutId);
            console.error('‚ùå L·ªói recognizeOnceAsync:', err);
            try { recognizer.close(); } catch {}
            reject(err);
          }
        }
      );
      
      // Backup timeout ch·ªâ khi th·ª±c s·ª± c·∫ßn thi·∫øt (15s)
      setTimeout(() => {
        if (!isCompleted) {
          isCompleted = true;
          clearTimeout(timeoutId);
          console.error('‚è∞ Hard timeout - Azure kh√¥ng ph·∫£n h·ªìi');
          try { recognizer.close(); } catch {}
          reject(new Error('Azure kh√¥ng ph·∫£n h·ªìi sau 15 gi√¢y'));
        }
      }, 15000);
    });

    // Parse Pronunciation Assessment JSON
    const paJson = result.properties.getProperty(SpeechSDK.PropertyId.SpeechServiceResponse_JsonResult);
    let accuracy = 0, completeness = 0, fluency = 0, overall = 0;
    
    if (result.reason === SpeechSDK.ResultReason.RecognizedSpeech) {
      // Nh·∫≠n d·∫°ng th√†nh c√¥ng, parse ƒëi·ªÉm
      try {
        const parsed = JSON.parse(paJson);
        const nbest = parsed?.NBest?.[0];
        const pa = nbest?.PronunciationAssessment;
        accuracy = pa?.AccuracyScore ?? 0;
        completeness = pa?.CompletenessScore ?? 0;
        fluency = pa?.FluencyScore ?? 0;
        const pronScore = pa?.PronScore ?? 0;
        
        // üé§ SPEECH-TO-TEXT: Hi·ªÉn th·ªã text ng∆∞·ªùi d√πng ƒë√£ n√≥i
        const recognizedText = result.text || nbest?.Display || '';
        console.log('üó£Ô∏è Ng∆∞·ªùi d√πng ph√°t √¢m:', recognizedText || '(r·ªóng)');
        console.log('üìù Text mong ƒë·ª£i:', referenceText);
        
        if (!recognizedText || recognizedText.trim() === '') {
          console.warn('‚ö†Ô∏è Azure kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c text n√†o!');
          console.log('‚úÖ Kh·ªõp: KH√îNG');
        } else {
          console.log('‚úÖ Kh·ªõp:', recognizedText.toLowerCase() === referenceText.toLowerCase() ? 'C√ì' : 'KH√îNG');
        }
        
        // LOGIC M·ªöI: X·ª≠ l√Ω khi completeness = 0 (n√≥i m·ªôt ph·∫ßn t·ª´)
        const words = nbest?.Words || [];
        
        if (completeness === 0 && words.length > 0) {
          // Ng∆∞·ªùi d√πng ch·ªâ n√≥i m·ªôt ph·∫ßn t·ª´, nh∆∞ng Azure v·∫´n nh·∫≠n d·∫°ng ƒë∆∞·ª£c
          console.warn('‚ö†Ô∏è CompletenessScore = 0 -> Ch·ªâ n√≥i m·ªôt ph·∫ßn t·ª´');
          
          const word = words[0];
          const syllables = word.Syllables || [];
          
          if (syllables.length > 0) {
            // T√≠nh ƒëi·ªÉm d·ª±a tr√™n ph·∫ßn ƒë√£ n√≥i
            let totalSyllableScore = 0;
            syllables.forEach((syl: any) => {
              const sylScore = syl.PronunciationAssessment?.AccuracyScore ?? 0;
              totalSyllableScore += sylScore;
              console.log(`üìù √Çm ti·∫øt "${syl.Syllable}": ${sylScore} ƒëi·ªÉm`);
            });
            
            // ƒêi·ªÉm trung b√¨nh c·ªßa c√°c √¢m ƒë√£ n√≥i, nh∆∞ng tr·ª´ penalty v√¨ thi·∫øu t·ª´
            const avgScore = totalSyllableScore / syllables.length;
            // Penalty: 50% v√¨ kh√¥ng n√≥i ƒë·ªß t·ª´
            overall = Math.round(avgScore * 0.5);
            
            console.log('üí° Ng∆∞·ªùi d√πng ch·ªâ n√≥i m·ªôt ph·∫ßn t·ª´:');
            console.log(`   - S·ªë √¢m ƒë√£ n√≥i: ${syllables.length}`);
            console.log(`   - ƒêi·ªÉm TB c√°c √¢m: ${avgScore.toFixed(1)}`);
            console.log(`   - ƒêi·ªÉm cu·ªëi (penalty 50%): ${overall}`);
            
            return { accuracy, completeness, fluency, overall, raw: parsed };
          } else {
            // Kh√¥ng c√≥ syllable data - d√πng accuracy score n·∫øu c√≥
            if (accuracy > 0) {
              // Azure v·∫´n cho ƒëi·ªÉm accuracy m·∫∑c d√π kh√¥ng c√≥ syllable detail
              overall = Math.round(accuracy * 0.3); // Penalty 70% v√¨ thi·∫øu t·ª´
              console.log(`üí° Kh√¥ng c√≥ syllable data nh∆∞ng c√≥ accuracy: ${accuracy}`);
              console.log(`   - ƒêi·ªÉm cu·ªëi (penalty 70%): ${overall}`);
            } else {
              overall = 0;
              console.log('üí° Kh√¥ng c√≥ d·ªØ li·ªáu √¢m ti·∫øt v√† accuracy -> 0 ƒëi·ªÉm');
            }
            return { accuracy, completeness, fluency, overall, raw: parsed };
          }
        }
        
        if (completeness === 0) {
          // Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c g√¨ - nh∆∞ng ki·ªÉm tra xem c√≥ accuracy kh√¥ng
          console.warn('‚ö†Ô∏è CompletenessScore = 0 v√† kh√¥ng c√≥ Words data');
          if (accuracy > 0) {
            overall = Math.round(accuracy * 0.2); // Penalty 80%
            console.log(`üí° C√≥ accuracy score: ${accuracy} -> ƒêi·ªÉm cu·ªëi: ${overall}`);
          } else {
            overall = 0;
            console.log('üí° Kh√¥ng c√≥ b·∫•t k·ª≥ d·ªØ li·ªáu n√†o -> 0 ƒëi·ªÉm');
          }
          return { accuracy, completeness, fluency, overall, raw: parsed };
        }
        
        // LOGIC CH√çNH: T√≠nh ƒëi·ªÉm khi n√≥i ƒë·ªß t·ª´ (completeness > 0)
        if (words.length > 0 && completeness > 0) {
          const word = words[0];
          const syllables = word.Syllables || [];
          const totalSyllables = syllables.length;
          
          if (totalSyllables > 0) {
            // TR∆Ø·ªúNG H·ª¢P ƒê·∫∂C BI·ªÜT: T·ª´ m·ªôt √¢m ti·∫øt
            if (totalSyllables === 1) {
              console.log('üí° T·ª´ m·ªôt √¢m ti·∫øt -> ƒêi·ªÉm t·ª´ chi ti·∫øt ph√°t √¢m (syllable score)');
              
              // L·∫•y ƒëi·ªÉm t·ª´ chi ti·∫øt ph√°t √¢m (syllable)
              const sylScore = syllables[0].PronunciationAssessment?.AccuracyScore ?? 0;
              
              // Overall = syllable score
              overall = sylScore;
              
              // Accuracy c≈©ng = syllable score (kh√¥ng d√πng accuracy t·ªïng th·ªÉ)
              const adjustedAccuracy = sylScore;
              
              console.log('üìä Single Syllable Analysis:', {
                syllable: syllables[0].Syllable,
                syllableScore: sylScore,
                azureAccuracy: accuracy,
                adjustedAccuracy: sylScore,
                completeness,
                fluency,
                overall: sylScore
              });
              
              // Tr·∫£ v·ªÅ v·ªõi accuracy v√† overall ƒëi·ªÅu ch·ªânh
              return { 
                accuracy: adjustedAccuracy, 
                completeness, 
                fluency, 
                overall, 
                raw: parsed 
              };
            }
            
            // TR∆Ø·ªúNG H·ª¢P TH∆Ø·ªúNG: T·ª´ nhi·ªÅu √¢m ti·∫øt (>= 2)
            console.log('üí° T·ª´ nhi·ªÅu √¢m ti·∫øt -> √Åp d·ª•ng logic penalty');
            
            // ƒê·∫øm s·ªë √¢m ti·∫øt b·ªã thi·∫øu (score = 0) v√† s·ªë √¢m ti·∫øt y·∫øu (score < 60)
            let missingSyllableCount = 0; // √Çm kh√¥ng ƒë∆∞·ª£c nh·∫≠n d·∫°ng
            let badSyllableCount = 0; // √Çm y·∫øu (< 60 nh∆∞ng > 0)
            let totalSyllableScore = 0;
            
            syllables.forEach((syl: any) => {
              const sylScore = syl.PronunciationAssessment?.AccuracyScore ?? 0;
              totalSyllableScore += sylScore;
              
              if (sylScore === 0) {
                missingSyllableCount++;
                console.error(`‚ùå √Çm ti·∫øt "${syl.Syllable}" KH√îNG ƒë∆∞·ª£c nh·∫≠n d·∫°ng: 0 ƒëi·ªÉm`);
              } else if (sylScore < 60) {
                badSyllableCount++;
                console.log(`‚ö†Ô∏è √Çm ti·∫øt "${syl.Syllable}" c√≥ ƒëi·ªÉm th·∫•p: ${sylScore}`);
              }
            });
            
            // KI·ªÇM TRA KHO·∫¢NG C√ÅCH TH·ªúI GIAN GI·ªÆA C√ÅC √ÇM TI·∫æT (Fluency Timing Check)
            let timingPausesCount = 0;
            const MAX_GAP_MS = 50; // 0.05 gi√¢y = 50ms
            const TIMING_PENALTY_PER_PAUSE = 5; // Penalty 5 ƒëi·ªÉm m·ªói kho·∫£ng d·ª´ng
            
            for (let i = 0; i < syllables.length - 1; i++) {
              const currentSyl = syllables[i];
              const nextSyl = syllables[i + 1];
              
              // Offset v√† Duration t√≠nh b·∫±ng ƒë∆°n v·ªã 100-nanosecond (1ms = 10,000 units)
              const currentEnd = (currentSyl.Offset + currentSyl.Duration) / 10000; // Convert to ms
              const nextStart = nextSyl.Offset / 10000; // Convert to ms
              const gap = nextStart - currentEnd;
              
              if (gap > MAX_GAP_MS) {
                timingPausesCount++;
                console.warn(
                  `‚è±Ô∏è Kho·∫£ng d·ª´ng gi·ªØa "${currentSyl.Syllable}" v√† "${nextSyl.Syllable}": ` +
                  `${gap.toFixed(1)}ms (> ${MAX_GAP_MS}ms)`
                );
              }
            }
            
            // T√≠nh ph·∫ßn trƒÉm m·ªói √¢m ti·∫øt
            const percentPerSyllable = 100 / totalSyllables;
            
            // T√≠nh penalty
            const missingPenalty = missingSyllableCount * percentPerSyllable;
            const badPenalty = badSyllableCount * percentPerSyllable;
            const totalPenalty = missingPenalty + badPenalty;
            
            // T√≠nh s·ªë √¢m ƒë√£ ƒë·ªçc ƒë∆∞·ª£c (kh√¥ng b·ªã missing)
            const pronouncedSyllables = totalSyllables - missingSyllableCount;
            const pronouncedPercentage = (pronouncedSyllables / totalSyllables) * 100;
            
            console.log(`üìù Ph√¢n t√≠ch √¢m ti·∫øt: ${pronouncedSyllables}/${totalSyllables} √¢m ƒë∆∞·ª£c ƒë·ªçc (${pronouncedPercentage.toFixed(1)}%)`);
            
            // LOGIC M·ªöI: ƒêi·ªÅu ch·ªânh Completeness d·ª±a tr√™n s·ªë √¢m th·ª±c t·∫ø ƒë·ªçc ƒë∆∞·ª£c
            let adjustedCompleteness = completeness;
            
            // N·∫øu Azure tr·∫£ v·ªÅ Completeness = 0 NH∆ØNG ƒë√£ ƒë·ªçc ƒë∆∞·ª£c >= 1 √¢m
            if (completeness === 0 && pronouncedSyllables > 0) {
              // T√≠nh completeness base t·ª´ s·ªë √¢m ƒë√£ ƒë·ªçc
              // C√¥ng th·ª©c: pronouncedPercentage (100% n·∫øu ƒë·ªçc h·∫øt, gi·∫£m d·∫ßn n·∫øu thi·∫øu)
              adjustedCompleteness = Math.round(pronouncedPercentage);
              console.warn(`ÔøΩ Completeness g·ªëc = 0 nh∆∞ng ƒë√£ ƒë·ªçc ${pronouncedSyllables}/${totalSyllables} √¢m -> Completeness: ${adjustedCompleteness}`);
            } else if (missingSyllableCount > 0) {
              // N·∫øu Completeness > 0 nh∆∞ng c√≥ √¢m b·ªã thi·∫øu
              adjustedCompleteness = Math.max(0, completeness - missingPenalty);
              console.warn(`‚ö†Ô∏è ƒêi·ªÅu ch·ªânh Completeness: ${completeness} -> ${adjustedCompleteness.toFixed(0)} (thi·∫øu ${missingSyllableCount} √¢m)`);
            }
            
            // LOGIC M·ªöI: ƒêi·ªÅu ch·ªânh Fluency h·ª£p l√Ω
            let adjustedFluency = fluency;
            
            // N·∫øu Azure tr·∫£ v·ªÅ Fluency = 0 NH∆ØNG ng∆∞·ªùi d√πng ƒë√£ ƒë·ªçc >= 1 √¢m
            if (fluency === 0 && pronouncedSyllables > 0) {
              // T√≠nh fluency base d·ª±a tr√™n s·ªë √¢m ƒë√£ ƒë·ªçc
              // C√¥ng th·ª©c: pronouncedPercentage √ó 0.8 (ƒëi·ªÉm base t·ªëi ƒëa 80 n·∫øu ƒë·ªçc h·∫øt)
              adjustedFluency = Math.round(pronouncedPercentage * 0.8);
              console.warn(`üîß Fluency g·ªëc = 0 nh∆∞ng ƒë√£ ƒë·ªçc ${pronouncedSyllables} √¢m -> Base fluency: ${adjustedFluency}`);
            }
            
            // Penalty 1: N·∫øu c√≥ √¢m b·ªã thi·∫øu -> gi·∫£m d·ª±a tr√™n t·ª∑ l·ªá thi·∫øu
            if (missingSyllableCount > 0 && adjustedFluency > 0) {
              const missingRatio = missingSyllableCount / totalSyllables;
              const flMissingPenalty = Math.round(adjustedFluency * missingRatio * 0.3); // Penalty 30% theo t·ª∑ l·ªá (gi·∫£m t·ª´ 50% xu·ªëng)
              const beforePenalty = adjustedFluency;
              adjustedFluency = Math.max(0, adjustedFluency - flMissingPenalty);
              console.warn(
                `‚ö†Ô∏è Fluency penalty (missing): ${beforePenalty} -> ${adjustedFluency} ` +
                `(thi·∫øu ${missingSyllableCount}/${totalSyllables} √¢m, penalty: ${flMissingPenalty})`
              );
            }
            
            // Penalty 2: N·∫øu c√≥ kho·∫£ng d·ª´ng qu√° l√¢u gi·ªØa c√°c √¢m ti·∫øt
            if (timingPausesCount > 0 && adjustedFluency > 0) {
              const timingPenalty = timingPausesCount * TIMING_PENALTY_PER_PAUSE;
              const beforePenalty = adjustedFluency;
              adjustedFluency = Math.max(0, adjustedFluency - timingPenalty);
              console.warn(
                `‚è±Ô∏è Fluency penalty (timing): ${beforePenalty} -> ${adjustedFluency} ` +
                `(${timingPausesCount} kho·∫£ng d·ª´ng √ó ${TIMING_PENALTY_PER_PAUSE} ƒëi·ªÉm)`
              );
            }
            
            // ƒê·∫£m b·∫£o fluency √≠t nh·∫•t b·∫±ng pronouncedPercentage √ó 0.5 n·∫øu ƒë√£ ƒë·ªçc ƒë∆∞·ª£c √¢m
            if (pronouncedSyllables > 0) {
              const minFluency = Math.round(pronouncedPercentage * 0.5);
              if (adjustedFluency < minFluency) {
                console.warn(`üîß TƒÉng fluency l√™n m·ª©c t·ªëi thi·ªÉu: ${adjustedFluency} -> ${minFluency}`);
                adjustedFluency = minFluency;
              }
            }
            
            const baseScore = pronScore < accuracy ? pronScore : accuracy;
            overall = Math.max(0, Math.round(baseScore - totalPenalty));
            
            console.log('üìä Multi-Syllable Analysis:', {
              totalSyllables,
              percentPerSyllable: percentPerSyllable.toFixed(2) + '%',
              missingSyllables: missingSyllableCount,
              badSyllables: badSyllableCount,
              timingPauses: timingPausesCount,
              missingPenalty: missingPenalty.toFixed(2) + '%',
              badPenalty: badPenalty.toFixed(2) + '%',
              totalPenalty: totalPenalty.toFixed(2) + '%',
              timingPenalty: timingPausesCount * TIMING_PENALTY_PER_PAUSE,
              baseScore,
              finalScore: overall,
              adjustedCompleteness: adjustedCompleteness.toFixed(0),
              adjustedFluency: adjustedFluency.toFixed(0)
            });
            
            // Tr·∫£ v·ªÅ ƒëi·ªÉm ƒë√£ ƒëi·ªÅu ch·ªânh
            return { 
              accuracy, 
              completeness: Math.round(adjustedCompleteness), 
              fluency: Math.round(adjustedFluency), 
              overall, 
              raw: parsed 
            };
          } else {
            // Kh√¥ng c√≥ syllable data, d√πng logic c≈©
            if (pronScore < accuracy) {
              overall = pronScore;
            } else {
              overall = accuracy;
            }
          }
        } else if (completeness === 0) {
          // T·ª´ kh√¥ng ƒë∆∞·ª£c ph√°t √¢m ƒë·∫ßy ƒë·ªß -> ƒëi·ªÉm r·∫•t th·∫•p
          console.warn('‚ö†Ô∏è CompletenessScore = 0 -> T·ª´ kh√¥ng ƒë∆∞·ª£c n√≥i ho·∫∑c thi·∫øu');
          overall = Math.min(20, accuracy);
        } else {
          // Fallback: d√πng logic so s√°nh pronScore vs accuracy
          if (pronScore < accuracy) {
            overall = pronScore;
          } else {
            overall = accuracy;
          }
        }
        
        console.log('ƒêi·ªÉm ch·∫•m:', { accuracy, completeness, fluency, pronScore, overall });
        return { accuracy, completeness, fluency, overall, raw: parsed };
      } catch (err) {
        console.error('L·ªói parse JSON:', err);
        return { accuracy: 0, completeness: 0, fluency: 0, overall: 0, raw: paJson };
      }
    } else if (result.reason === SpeechSDK.ResultReason.NoMatch) {
      // NoMatch: Azure nghe ƒë∆∞·ª£c nh∆∞ng kh√¥ng kh·ªõp t·ªët
      console.warn('‚ö†Ô∏è NoMatch: Azure kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c t·ª´ ch√≠nh x√°c');
      
      const recognizedText = result.text?.toLowerCase().replace(/[.,!?]/g, '') || '';
      const expectedText = referenceText.toLowerCase();
      
      console.log('üó£Ô∏è Ng∆∞·ªùi d√πng ph√°t √¢m:', recognizedText || '(kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c)');
      console.log('üìù Text mong ƒë·ª£i:', expectedText);
      
      if (!recognizedText || recognizedText.trim() === '') {
        console.warn('üí° G·ª£i √Ω: C√≥ th·ªÉ b·∫°n n√≥i qu√° nh·ªè, qu√° nhanh, ho·∫∑c ch·ªâ n√≥i m·ªôt ph·∫ßn t·ª´');
        return { 
          accuracy: 0, 
          completeness: 0, 
          fluency: 0, 
          overall: 0, 
          raw: { text: result.text, reason: 'NoMatch - No text recognized' } 
        };
      }
      
      // T√≠nh ƒëi·ªÉm ƒë∆°n gi·∫£n d·ª±a tr√™n text match
      const similarity = recognizedText === expectedText ? 70 : 30;
      console.log(`‚úÖ Kh·ªõp: KH√îNG (ƒë·ªô t∆∞∆°ng ƒë·ªìng: ${similarity}%)`);
      
      return { 
        accuracy: similarity, 
        completeness: similarity, 
        fluency: Math.max(40, similarity - 10), 
        overall: similarity, 
        raw: { text: result.text, reason: result.reason } 
      };
    } else {
      throw new Error(`L·ªói nh·∫≠n d·∫°ng: Reason ${result.reason}`);
    }
  }
}
