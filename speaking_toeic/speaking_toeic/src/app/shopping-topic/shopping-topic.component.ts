import { Component, signal, Inject, PLATFORM_ID } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { Router, ActivatedRoute } from '@angular/router';
import { AzureSpeechService } from '../services/azure-speech.service';

// C·∫•u tr√∫c cho b√†i h·ªçc n√≥i - th√™m thu·ªôc t√≠nh 'vowel' v√† 'topic'
export interface SpeakingLesson {
  id: string;
  english: string;
  vietnamese: string;
  phonetic: string;
  category: string;
  vowel: string; // v√≠ d·ª•: 'i', 'ee', 'a'
  topic?: string; // v√≠ d·ª•: 'school', 'hobby', 'food'
}

// C·∫•u tr√∫c cho ƒëi·ªÉm s·ªë - ƒë√°nh gi√° k·∫øt qu·∫£
export interface SpeakingScore {
  accuracy: number;
  completeness: number;
  fluency: number;
  naturalness: number;
  overall: number;
}

export interface PhonemeDetail {
  phoneme: string;
  score: number;
  color: string;
  hasData: boolean;
}

export interface SyllableDetail {
  syllable: string;
  score: number;
  accuracyScore: number;
}

@Component({
  selector: 'app-shopping-topic',
  imports: [CommonModule],
  templateUrl: './shopping-topic.component.html',
  styleUrls: ['./shopping-topic.component.scss']
})
export class ShoppingTopicComponent {
  // Qu·∫£n l√Ω tr·∫°ng th√°i - theo d√µi tr·∫°ng th√°i hi·ªán t·∫°i
  currentLessonIndex = signal(0);
  activeTab = signal('flashcard');
  isRecording = signal(false);
  isProcessing = signal(false);
  showScore = signal(false);
  isPlayingUS = signal(false);
  isPlayingUK = signal(false);
  showScoreDetails = signal(false);

  // Logo paths
  logoPath = 'assets/img/logo.png';
  logoTextPath = 'assets/img/VN-2-1024x512.png';
  showFallback = false;
  showMicFallback = true; // T·∫°m th·ªùi enable fallback
  activeVowel = signal('all'); // M·∫∑c ƒë·ªãnh l√† 'all' ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£
  activeTopic = signal<string | null>('shopping'); // Topic hi·ªán t·∫°i (school, hobby, etc.)

  // All lessons for the current topic
  lessons: SpeakingLesson[] = [];
  // All lessons without filter (backup)
  allTopicLessons: SpeakingLesson[] = [];
  // Lessons to be displayed in the sidebar (only 5)
  sidebarLessons: SpeakingLesson[] = [];

  // G√°n nguy√™n √¢m v√† topic cho m·ªói t·ª´ - 30 t·ª´/ch·ªß ƒë·ªÅ
  private allLessons: SpeakingLesson[] = [
    // ===== TOPIC: SHOPPING (Mua s·∫Øm) - 30 t·ª´ =====
    // Nguy√™n √¢m -ee (5 t·ª´)
    { id: 'sh1', english: 'free', vietnamese: 'mi·ªÖn ph√≠', phonetic: '[friÀê]', category: 'Shopping', vowel: 'ee', topic: 'shopping' },
    { id: 'sh2', english: 'fee', vietnamese: 'ph√≠', phonetic: '[fiÀê]', category: 'Shopping', vowel: 'ee', topic: 'shopping' },
    { id: 'sh3', english: 'agree', vietnamese: 'ƒë·ªìng √Ω', phonetic: '[…ôÀà…°riÀê]', category: 'Shopping', vowel: 'ee', topic: 'shopping' },
    { id: 'sh4', english: 'guarantee', vietnamese: 'ƒë·∫£m b·∫£o', phonetic: '[Àå…°√¶r…ônÀàtiÀê]', category: 'Shopping', vowel: 'ee', topic: 'shopping' },
    { id: 'sh5', english: 'employee', vietnamese: 'nh√¢n vi√™n', phonetic: '[Àåempl…î…™ÀàiÀê]', category: 'Shopping', vowel: 'ee', topic: 'shopping' },
    // Nguy√™n √¢m -i (5 t·ª´)
    { id: 'sh6', english: 'discount', vietnamese: 'gi·∫£m gi√°', phonetic: '[Ààd…™ska änt]', category: 'Shopping', vowel: 'i', topic: 'shopping' },
    { id: 'sh7', english: 'gift', vietnamese: 'qu√† t·∫∑ng', phonetic: '[…°…™ft]', category: 'Shopping', vowel: 'i', topic: 'shopping' },
    { id: 'sh8', english: 'list', vietnamese: 'danh s√°ch', phonetic: '[l…™st]', category: 'Shopping', vowel: 'i', topic: 'shopping' },
    { id: 'sh9', english: 'visit', vietnamese: 'gh√© thƒÉm', phonetic: '[Ààv…™z…™t]', category: 'Shopping', vowel: 'i', topic: 'shopping' },
    { id: 'sh10', english: 'delivery', vietnamese: 'giao h√†ng', phonetic: '[d…™Ààl…™v…ôri]', category: 'Shopping', vowel: 'i', topic: 'shopping' },
    // Nguy√™n √¢m -a (5 t·ª´)
    { id: 'sh11', english: 'cash', vietnamese: 'ti·ªÅn m·∫∑t', phonetic: '[k√¶ É]', category: 'Shopping', vowel: 'a', topic: 'shopping' },
    { id: 'sh12', english: 'bag', vietnamese: 't√∫i', phonetic: '[b√¶…°]', category: 'Shopping', vowel: 'a', topic: 'shopping' },
    { id: 'sh13', english: 'brand', vietnamese: 'th∆∞∆°ng hi·ªáu', phonetic: '[br√¶nd]', category: 'Shopping', vowel: 'a', topic: 'shopping' },
    { id: 'sh14', english: 'fashion', vietnamese: 'th·ªùi trang', phonetic: '[Ààf√¶ Én]', category: 'Shopping', vowel: 'a', topic: 'shopping' },
    { id: 'sh15', english: 'package', vietnamese: 'g√≥i h√†ng', phonetic: '[Ààp√¶k…™d í]', category: 'Shopping', vowel: 'a', topic: 'shopping' },
    // Nguy√™n √¢m -o (5 t·ª´)
    { id: 'sh16', english: 'shopping', vietnamese: 'mua s·∫Øm', phonetic: '[Àà É…íp…™≈ã]', category: 'Shopping', vowel: 'o', topic: 'shopping' },
    { id: 'sh17', english: 'product', vietnamese: 's·∫£n ph·∫©m', phonetic: '[Ààpr…íd åkt]', category: 'Shopping', vowel: 'o', topic: 'shopping' },
    { id: 'sh18', english: 'option', vietnamese: 'l·ª±a ch·ªçn', phonetic: '[Àà…íp É…ôn]', category: 'Shopping', vowel: 'o', topic: 'shopping' },
    { id: 'sh19', english: 'cost', vietnamese: 'chi ph√≠', phonetic: '[k…íst]', category: 'Shopping', vowel: 'o', topic: 'shopping' },
    { id: 'sh20', english: 'shop', vietnamese: 'c·ª≠a h√†ng', phonetic: '[ É…íp]', category: 'Shopping', vowel: 'o', topic: 'shopping' },
    // Ph·ª• √¢m -p (5 t·ª´)
    { id: 'sh21', english: 'price', vietnamese: 'gi√° c·∫£', phonetic: '[pra…™s]', category: 'Shopping', vowel: 'p', topic: 'shopping' },
    { id: 'sh22', english: 'purchase', vietnamese: 'mua h√†ng', phonetic: '[Ààp…úÀêt É…ôs]', category: 'Shopping', vowel: 'p', topic: 'shopping' },
    { id: 'sh23', english: 'payment', vietnamese: 'thanh to√°n', phonetic: '[Ààpe…™m…ônt]', category: 'Shopping', vowel: 'p', topic: 'shopping' },
    { id: 'sh24', english: 'promotion', vietnamese: 'khuy·∫øn m√£i', phonetic: '[pr…ôÀàm…ô ä Én]', category: 'Shopping', vowel: 'p', topic: 'shopping' },
    { id: 'sh25', english: 'popular', vietnamese: 'ph·ªï bi·∫øn', phonetic: '[Ààp…ípj…ôl…ô]', category: 'Shopping', vowel: 'p', topic: 'shopping' },
    // Ph·ª• √¢m -b (5 t·ª´)
    { id: 'sh26', english: 'buy', vietnamese: 'mua', phonetic: '[ba…™]', category: 'Shopping', vowel: 'b', topic: 'shopping' },
    { id: 'sh27', english: 'budget', vietnamese: 'ng√¢n s√°ch', phonetic: '[Ààb åd í…™t]', category: 'Shopping', vowel: 'b', topic: 'shopping' },
    { id: 'sh28', english: 'bargain', vietnamese: 'm·∫∑c c·∫£', phonetic: '[Ààb…ëÀê…°…ôn]', category: 'Shopping', vowel: 'b', topic: 'shopping' },
    { id: 'sh29', english: 'basket', vietnamese: 'gi·ªè h√†ng', phonetic: '[Ààb…ëÀêsk…™t]', category: 'Shopping', vowel: 'b', topic: 'shopping' },
    { id: 'sh30', english: 'bill', vietnamese: 'h√≥a ƒë∆°n', phonetic: '[b…™l]', category: 'Shopping', vowel: 'b', topic: 'shopping' }
  ];

  currentScore: SpeakingScore = {
    accuracy: 60,
    completeness: 90,
    fluency: 70,
    naturalness: 55,
    overall: 68
  };

  // L∆∞u tr·ªØ k·∫øt qu·∫£ chi ti·∫øt t·ª´ Azure
  azureRawResult: any = null;
  syllableDetails: SyllableDetail[] = [];

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private azureSpeech: AzureSpeechService,
    @Inject(PLATFORM_ID) private platformId: Object
  ) {
    // Load d·ªØ li·ªáu shopping ngay l·∫≠p t·ª©c
    this.loadTopicData('shopping');
    this.initializeSpeechSynthesis();
  }

  private initializeSpeechSynthesis() {
    // Ch·ªâ ch·∫°y tr√™n browser, kh√¥ng ch·∫°y tr√™n server
    if (isPlatformBrowser(this.platformId) && 'speechSynthesis' in window) {
      // Load voices ngay l·∫≠p t·ª©c n·∫øu c√≥ s·∫µn
      const voices = speechSynthesis.getVoices();
      if (voices.length > 0) {
        console.log('Voices loaded:', voices.length);
      } else {
        // N·∫øu ch∆∞a c√≥ voices, ƒë·ª£i event voiceschanged
        speechSynthesis.addEventListener('voiceschanged', () => {
          const loadedVoices = speechSynthesis.getVoices();
          console.log('Voices loaded after event:', loadedVoices.length);
        });
      }
    }
  }

  getCurrentLesson(): SpeakingLesson {
    return this.lessons[this.currentLessonIndex()];
  }

  async startRecording() {
    if (this.isRecording() || this.isProcessing()) {
      return;
    }
    const reference = this.getCurrentLesson()?.english;
    if (!reference) return;

    this.isRecording.set(true);
    this.showScore.set(false);

    // Delay nh·ªè ƒë·ªÉ Azure kh·ªüi t·∫°o mic
    await new Promise(resolve => setTimeout(resolve, 500));
    this.isProcessing.set(true);
    console.log('üé§ Azure ƒë√£ s·∫µn s√†ng - H√£y n√≥i t·ª´:', reference);

    try {
      const result = await this.azureSpeech.assessPronunciation(reference, 5000);
      console.log('‚úÖ Nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ Azure:', result);

      // L∆∞u raw result ƒë·ªÉ parse syllables
      this.azureRawResult = result.raw;
      this.parseSyllableDetails(result.raw);

      this.currentScore = {
        accuracy: Math.round(result.accuracy),
        completeness: Math.round(result.completeness),
        fluency: Math.round(result.fluency),
        naturalness: 60,
        overall: Math.round(result.overall)
      };
      this.showScore.set(true);
    } catch (err) {
      console.error('‚ùå L·ªói ch·∫•m ƒëi·ªÉm Azure:', err);
      // Ch·ªâ hi·ªán alert n·∫øu th·ª±c s·ª± l√† l·ªói nghi√™m tr·ªçng, kh√¥ng ph·∫£i NoMatch
      if (err instanceof Error && !err.message.includes('NoMatch')) {
        alert('Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c gi·ªçng n√≥i ho·∫∑c h·∫øt th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      this.isRecording.set(false);
      this.isProcessing.set(false);
    }
  }

  async playAudio(type: 'uk' | 'us') {
    const word = this.getCurrentLesson().english;
    console.log(`Playing ${type} audio via Azure TTS for:`, word);
    this.isPlayingUS.set(type === 'us');
    this.isPlayingUK.set(type === 'uk');
    try {
      await this.azureSpeech.speak(word, type);
    } catch (e) {
      console.error('L·ªói TTS Azure:', e);
      alert('Kh√¥ng ph√°t √¢m ƒë∆∞·ª£c v·ªõi Azure TTS. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      this.isPlayingUS.set(false);
      this.isPlayingUK.set(false);
    }
  }

  navigateLesson(direction: 'prev' | 'next') {
    const currentIndex = this.currentLessonIndex();
    if (direction === 'prev' && currentIndex > 0) {
      this.currentLessonIndex.set(currentIndex - 1);
    } else if (direction === 'next' && currentIndex < this.lessons.length - 1) {
      this.currentLessonIndex.set(currentIndex + 1);
    }
    this.showScore.set(false);
  }

  refreshLesson() {
    this.showScore.set(false);
    // Reset any practice state
  }

  goBack() {
    this.router.navigate(['/']);
  }

  onImageError(event: any, type: string) {
    console.log(`Image error for ${type}:`, event);
    this.showFallback = true;
  }

  onMicImageError(event: any) {
    console.log('Mic image error:', event);
    this.showMicFallback = true;
  }

  toggleScoreDetails() {
    this.showScoreDetails.set(!this.showScoreDetails());
  }

  parseSyllableDetails(rawResult: any) {
    this.syllableDetails = [];

    if (!rawResult || !rawResult.NBest || !rawResult.NBest[0]) {
      console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu syllable t·ª´ Azure');
      return;
    }

    const words = rawResult.NBest[0].Words;
    if (!words || words.length === 0) {
      console.warn('Kh√¥ng c√≥ Words trong k·∫øt qu·∫£');
      return;
    }

    // L·∫•y syllables t·ª´ word ƒë·∫ßu ti√™n
    const word = words[0];
    const syllables = word.Syllables || [];

    console.log('Syllables t·ª´ Azure:', syllables);

    this.syllableDetails = syllables.map((syl: any) => ({
      syllable: syl.Syllable || '',
      score: Math.round(syl.PronunciationAssessment?.AccuracyScore || 0),
      accuracyScore: syl.PronunciationAssessment?.AccuracyScore || 0
    }));
  }

  getPhonemeBreakdown(): PhonemeDetail[] {
    // N·∫øu c√≥ d·ªØ li·ªáu syllable t·ª´ Azure, d√πng n√≥
    if (this.syllableDetails && this.syllableDetails.length > 0) {
      return this.syllableDetails.map(syl => ({
        phoneme: syl.syllable,
        score: syl.score,
        color: this.getScoreColor(syl.score),
        hasData: true
      }));
    }

    // Fallback: kh√¥ng c√≥ d·ªØ li·ªáu
    const word = this.getCurrentLesson()?.english || '';
    return [
      { phoneme: word, score: 0, color: 'poor', hasData: false }
    ];
  }

  hasUndetectedPhonemes(): boolean {
    return this.getPhonemeBreakdown().some(p => !p.hasData);
  }

  getScoreColor(score: number): string {
    if (score >= 80) return 'good';
    if (score >= 60) return 'medium';
    return 'poor';
  }

  // Load d·ªØ li·ªáu theo topic ID
  loadTopicData(topicId: string) {
    console.log(`Loading vocabulary for topic: ${topicId}`);

    // L·ªçc t·ª´ v·ª±ng theo topic
    const filtered = this.allLessons.filter(lesson => lesson.topic === topicId);

    if (filtered.length > 0) {
      this.activeTopic.set(topicId);
      this.allTopicLessons = filtered; // L∆∞u t·∫•t c·∫£ t·ª´ c·ªßa topic
      this.lessons = filtered; // Hi·ªÉn th·ªã t·∫•t c·∫£ ban ƒë·∫ßu
      this.sidebarLessons = filtered.slice(0, 5);
      this.currentLessonIndex.set(0);
      this.activeVowel.set('all'); // Reset v·ªÅ 'all'
      this.showScore.set(false);
      console.log(`Loaded ${filtered.length} words for topic '${topicId}'`);
    } else {
      console.warn(`No vocabulary found for topic '${topicId}', loading default`);
      this.activeTopic.set(null);
      // Fallback: load theo vowel n·∫øu kh√¥ng t√¨m th·∫•y topic
      this.filterByVowel(this.activeVowel());
    }
  }

  // L·ªçc t·ª´ v·ª±ng theo nguy√™n √¢m
  filterByVowel(vowel: string) {
    console.log(`Filtering by vowel: ${vowel}`);
    this.activeVowel.set(vowel);

    if (vowel === 'all') {
      // Hi·ªÉn th·ªã t·∫•t c·∫£
      this.lessons = this.allTopicLessons;
    } else {
      // L·ªçc theo nguy√™n √¢m
      this.lessons = this.allTopicLessons.filter(lesson => lesson.vowel === vowel);
    }

    this.sidebarLessons = this.lessons.slice(0, 5);
    this.currentLessonIndex.set(0);
    this.showScore.set(false);
  }

  // L·∫•y danh s√°ch nguy√™n √¢m c√≥ s·∫µn trong topic hi·ªán t·∫°i
  getAvailableVowels(): Array<{code: string, label: string, count: number}> {
    const vowelMap: {[key: string]: string} = {
      'ee': 'Nguy√™n √¢m -ee',
      'i': 'Nguy√™n √¢m -i',
      'a': 'Nguy√™n √¢m -a',
      'o': 'Nguy√™n √¢m -o',
      'p': 'Ph·ª• √¢m -p',
      'b': 'Ph·ª• √¢m -b'
    };

    // ƒê·∫øm s·ªë l∆∞·ª£ng t·ª´ theo t·ª´ng nguy√™n √¢m
    const vowelCounts: {[key: string]: number} = {};
    this.allTopicLessons.forEach(lesson => {
      vowelCounts[lesson.vowel] = (vowelCounts[lesson.vowel] || 0) + 1;
    });

    // T·∫°o danh s√°ch k·∫øt qu·∫£
    return Object.keys(vowelCounts).map(code => ({
      code,
      label: vowelMap[code] || code,
      count: vowelCounts[code]
    }));
  }

  // L·∫•y t√™n ch·ªß ƒë·ªÅ hi·ªán t·∫°i
  getCurrentTopicName(): string {
    const topicNames: { [key: string]: string } = {
      'school': 'Tr∆∞·ªùng h·ªçc',
      'hobby': 'S·ªü th√≠ch',
      'food': 'ƒê·ªì ƒÉn',
      'shopping': 'Mua s·∫Øm',
      'environment': 'M√¥i tr∆∞·ªùng',
      'work': 'C√¥ng vi·ªác'
    };

    const topic = this.activeTopic();
    return topic ? topicNames[topic] || topic : 'Luy·ªán ph√°t √¢m';
  }
}
